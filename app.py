{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assignment #5: Basic UI with Callbacks\n",
    "\n",
    "DS4003 | Spring 2024\n",
    "\n",
    "Objective: Practice buidling basic UI components in Dash. \n",
    "\n",
    "Task: Build an app that contains the following components user the gapminder dataset: `gdp_pcap.csv`. [Info](https://www.gapminder.org/gdp-per-capita/)\n",
    "\n",
    "UI Components:\n",
    "A dropdown menu that allows the user to select `country`\n",
    "-   The dropdown should allow the user to select multiple countries\n",
    "-   The options should populate from the dataset (not be hard-coded)\n",
    "A slider that allows the user to select `year`\n",
    "-   The slider should allow the user to select a range of years\n",
    "-   The range should be from the minimum year in the dataset to the maximum year in the dataset\n",
    "A graph that displays the `gdpPercap` for the selected countries over the selected years\n",
    "-   The graph should display the gdpPercap for each country as a line\n",
    "-   Each country should have a unique color\n",
    "-   Graph DOES NOT need to interact with dropdown or slider\n",
    "-   The graph should have a title and axis labels in reader friendly format  \n",
    "\n",
    "Layout:  \n",
    "- Use a stylesheet\n",
    "- There should be a title at the top of the page\n",
    "- There should be a description of the data and app below the title (3-5 sentences)\n",
    "- The dropdown and slider should be side by side above the graph and take up the full width of the page\n",
    "- The graph should be below the dropdown and slider and take up the full width of the page\n",
    "\n",
    "Submission: \n",
    "- There should be only one app in your submitted work\n",
    "- Comment your code\n",
    "- Submit the html file of the notebook save as `DS4003_A4_LastName.html`\n",
    "\n",
    "\n",
    "**For help you may use the web resources and pandas documentation. No co-pilot or ChatGPT.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n",
      "/Users/ishankoroth/anaconda3/envs/ds4003/lib/python3.8/site-packages/plotly/express/_core.py:1222: PerformanceWarning:\n",
      "\n",
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x13aa89e20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# import dependencies\n",
    "from dash import Dash, dcc, html, Input, Output\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "\n",
    "# load the CSS stylesheet\n",
    "stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
    "\n",
    "# initialize the app\n",
    "app = Dash(__name__, external_stylesheets=stylesheets)\n",
    "\n",
    "###DATA MANAGAMENT###\n",
    "# read in data (data can be found in course folder)\n",
    "df = pd.read_csv('gdp_pcap.csv')\n",
    "\n",
    "# Get unique countries for dropdown options\n",
    "countries = [{'label': country, 'value': country} for country in df['country'].unique()]\n",
    "\n",
    "# Define fixed values for the slider [UNUSED]\n",
    "# years = list(range(1800, 2100 + 1))\n",
    "\n",
    "# Set the index to 'country'\n",
    "df.set_index('country', inplace=True)\n",
    "\n",
    "# Function to convert values with 'k'\n",
    "def convert_with_k(value):\n",
    "    if 'k' in str(value):  # Ensure value is converted to string before checking for 'k'\n",
    "        return float(str(value).replace('k', '')) * 1000\n",
    "    else:\n",
    "        return float(value)\n",
    "\n",
    "# Apply the function to each cell in the DataFrame\n",
    "df = df.applymap(convert_with_k)\n",
    "\n",
    "# Create line plot using plotly.express\n",
    "fig = px.line(df.transpose(), x=df.columns, y=df.index, title='Population Over Time by Country')\n",
    "\n",
    "# Update axis labels\n",
    "fig.update_layout(xaxis_title='Year', yaxis_title='Population')\n",
    "\n",
    "# Update line plot using plotly.express when callback is being used\n",
    "def update_graph(selected_countries, selected_years):\n",
    "    filtered_df = df.loc[selected_countries, str(selected_years[0]):str(selected_years[1])]\n",
    "    fig = px.line(filtered_df.transpose(), x=filtered_df.columns, y=filtered_df.index, title='Population Over Time by Country')\n",
    "    fig.update_layout(xaxis_title='Year', yaxis_title='Population')\n",
    "    return fig\n",
    "\n",
    "###LAYOUT###\n",
    "app.layout = html.Div(children=[\n",
    "    html.H1(children=\"GDP Data - Assignment 4\"),\n",
    "    html.Div(children=\"This application computes data analytics on GDP data. It takes into account of the GDP per country specified in the data set. Other features, like the dropdown and slider, can be messed with, but do not affect the graph in any way whatsoever.\"),\n",
    "    \n",
    "    # Dropdown for country selection\n",
    "    html.Div([\n",
    "        dcc.Dropdown(\n",
    "            id='country-dropdown',\n",
    "            options=countries,\n",
    "            multi=True,\n",
    "            value=[],\n",
    "            placeholder=\"Select country\"\n",
    "        ),\n",
    "    ], style={'width': '49%', 'display': 'inline-block'}),\n",
    "    \n",
    "    # Slider for year selection\n",
    "    html.Div([\n",
    "        dcc.RangeSlider(\n",
    "            id='year-slider',\n",
    "            min=int(min(df.columns)),\n",
    "            max=int(max(df.columns)),\n",
    "            value=[int(min(df.columns)), int(max(df.columns))],\n",
    "            marks={str(year): str(year) if year % 50 == 0 else '' for year in range(int(min(df.columns)), int(max(df.columns)) + 1)},\n",
    "            tooltip={\"placement\": \"bottom\", \"always_visible\": True},\n",
    "            step=1\n",
    "        )\n",
    "    ], style={'width': '49%', 'display': 'inline-block'}),\n",
    "    \n",
    "    # Graph\n",
    "    dcc.Graph(id='population-graph', figure=fig),\n",
    "])\n",
    "\n",
    "# Define callback for updating the graph\n",
    "@app.callback(\n",
    "    Output('population-graph', 'figure'),\n",
    "    [Input('country-dropdown', 'value'),\n",
    "     Input('year-slider', 'value')]\n",
    ")\n",
    "def update_graph_callback(selected_countries, selected_years):\n",
    "    return update_graph(selected_countries, selected_years)\n",
    "\n",
    "# run the app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ds4003",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
